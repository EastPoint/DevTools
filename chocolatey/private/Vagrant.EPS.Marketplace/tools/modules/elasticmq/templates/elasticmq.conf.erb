// Configure main storage: either in-memory or database-backed
storage {
    // Possible values: in-memory, database
    type = <%= storage_type %>

    // Only for "database" type
    database {
        // Possible values: DB2, Derby, H2, MSSQL, MySQL, MySQLInnoDB, Oracle, PostgreSQL
        adapter = MySQLInnoDB
        jdbc-url = "jdbc:mysql://localhost:3306/elasticmq?useUnicode=true&amp;characterEncoding=UTF-8&amp;cacheServerConfiguration=true"
        // E.g. com.mysql.jdbc.Driver for MySQL, org.h2.Driver for H2
        driver-class = com.mysql.jdbc.Driver
        username = root
        password = ""
        create = false
        drop = false
    }
}

// Configure the file command log (journal)
// Journaling only makes sense for the in-memory storage.
file-log {
    enabled = true
    storage-dir = "$BASEDIR/data"
    rotate-logs-after-command-written = 10000
}

// What is the outside visible address of this ElasticMQ node (used by replication and rest-sqs)
node-address {
    protocol = http
    host = <%= host %>
    port = <%= port %>
    context-path = ""
}

// By default replication expects at least 3 nodes. Change if you are going to have a different number of nodes, as
// the messaging server only works if at least half of the configured number of nodes is alive. This is needed to
// ensure data consistency.
replication {
    enabled = false
    // Possible values: do-not-wait, wait-for-any, wait-for-majority, wait-for-all
    command-replication-mode = wait-for-majority
    number-of-nodes = 3
    custom-jgroups-stack-configuration-file {
        enabled = false
        path = ""
    }
    node-discovery {
        // Possible values: udp, tcp
        type = udp

        // Only for "tcp" type
        tcp {
            initial-members = [ ip1, ip2, ip3 ]
            replication-bind-address = "localhost:7800"
        }
    }
}

rest-sqs {
    enabled = <%= sqs_enabled %>
    bind-port = <%= bind_port %>
    bind-hostname = "<%= bind_host %>"
    // Possible values: relaxed, strict
    sqs-limits = relaxed
}
